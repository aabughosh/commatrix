// Code generated by mockery v2.43.2. DO NOT EDIT.

package debug

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// DebugPodInterface is an autogenerated mock type for the DebugPodInterface type
type MockDebugPodInterface struct {
	mock.Mock
}

// Clean provides a mock function with given fields:
func (_m *MockDebugPodInterface) Clean() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clean")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecWithRetry provides a mock function with given fields: command, interval, duration
func (_m *MockDebugPodInterface) ExecWithRetry(command string, interval time.Duration, duration time.Duration) ([]byte, error) {
	ret := _m.Called(command, interval, duration)

	if len(ret) == 0 {
		panic("no return value specified for ExecWithRetry")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, time.Duration) ([]byte, error)); ok {
		return rf(command, interval, duration)
	}
	if rf, ok := ret.Get(0).(func(string, time.Duration, time.Duration) []byte); ok {
		r0 = rf(command, interval, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Duration, time.Duration) error); ok {
		r1 = rf(command, interval, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeName provides a mock function with given fields:
func (_m *MockDebugPodInterface) GetNodeName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodeName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewDebugPodInterface creates a new instance of DebugPodInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDebugPodInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDebugPodInterface {
	mock := &MockDebugPodInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
