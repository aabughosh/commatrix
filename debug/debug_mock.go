// Code generated by MockGen. DO NOT EDIT.
// Source: debug/debug.go

// Package debug is a generated GoMock package.
package debug

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDebugPodInterface is a mock of DebugPodInterface interface.
type MockDebugPodInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDebugPodInterfaceMockRecorder
}

// MockDebugPodInterfaceMockRecorder is the mock recorder for MockDebugPodInterface.
type MockDebugPodInterfaceMockRecorder struct {
	mock *MockDebugPodInterface
}

// NewMockDebugPodInterface creates a new mock instance.
func NewMockDebugPodInterface(ctrl *gomock.Controller) *MockDebugPodInterface {
	mock := &MockDebugPodInterface{ctrl: ctrl}
	mock.recorder = &MockDebugPodInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDebugPodInterface) EXPECT() *MockDebugPodInterfaceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockDebugPodInterface) Clean() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockDebugPodInterfaceMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockDebugPodInterface)(nil).Clean))
}

// ExecWithRetry mocks base method.
func (m *MockDebugPodInterface) ExecWithRetry(command string, interval, duration time.Duration) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecWithRetry", command, interval, duration)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecWithRetry indicates an expected call of ExecWithRetry.
func (mr *MockDebugPodInterfaceMockRecorder) ExecWithRetry(command, interval, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecWithRetry", reflect.TypeOf((*MockDebugPodInterface)(nil).ExecWithRetry), command, interval, duration)
}

// GetNodeName mocks base method.
func (m *MockDebugPodInterface) GetNodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeName indicates an expected call of GetNodeName.
func (mr *MockDebugPodInterfaceMockRecorder) GetNodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeName", reflect.TypeOf((*MockDebugPodInterface)(nil).GetNodeName))
}
